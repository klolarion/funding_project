spring:
  base-url: http://localhost:9091
  application:
    name: funding_project
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: GAO0JWE09Ga094wje3g09awje
            client-secret: awg09awe0fjg
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Google

          naver:
            client-id: 1241251251251251251adawd
            client-secret: 125124125
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"

            client-name: Naver
            scope:
              - name
              - email

#
#          kakao:
#            client-id: {kakao rest key}
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
#            client-name: Kakao
#            scope:
#              - profile_nickname
#              - account_email


        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response.id
          kakao:
            user-info-uri: https://kapi.kakao.com/v2/user/me



  #DB connection for production
  #  datasource:
  #    driver-class-name: org.mariadb.jdbc.Driver
  #    url: jdbc:mariadb://almagest-auth-server-db.c6xfdqe0sq9a.ap-northeast-2.rds.amazonaws.com:3306/funding_db?useUnicode=true&characterEncoding=utf8mb4&serverTimezone=Asia/Seoul
  #    username: ${DB_USERNAME}
  #    password: ${DB_PASSWORD}


  #local test
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/funding_db?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Seoul
    username: root
    password: 1234



  #  db 한글데이터 오류발생시 확인
  #  SHOW VARIABLES LIKE 'character_set_database';
  #  ALTER DATABASE funding_db CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;
  #  utfmb4 - 4바이트로 이모지도 처리가능, 오류시 utf8로 변경



  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8

#  sql:
#    init:
#      mode: always # h2같은 임베디드 데이터베이스 외 mysql같은 db에 data.sql로 초기화 하기 위함

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
#    defer-datasource-initialization: true # data.sql으로 스프링부트실행시 데이터삽입

  #    show-sql: true
  #    properties:
  #      hibernate:
  #        format_sql: true

  #Swagger 3.0 for SpringBoot 3.x
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher # SpringBoot 2.x 이전의 url경로 매칭방법. 3.x는 PathPatternParser 방식

  #Redis
  data:
    redis:
      #      host: redis
      host: localhost
      port: 6379

#Swagger 3.0
#서버 실행 후 조회 경로
#http://localhost:9091/swagger-ui/index.html
springdoc:
  swagger-ui:
    path: /api-docs
  api-docs:
    path: /v3/api-docs
    enabled: true # open-api 공개설정

application:
  security:
    jwt:
      #      private-key : ${ALMAGEST_KEY}
      secret-key: 124124

server:
  port: 9091